
#define F_CPU 8000000UL
#define BAUD 9600
#define MYUBRR F_CPU/16/BAUD-1
#define BLOCK "■"
#define FIX "□"
#define BLANK "　"
#define WALL "▣"

#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>

int msec=0,sec=0, st=0, level=1, lines=0;
int score0=0, score1=0, score2=0, score3=0, score4=0, score5=0;
int bDrawBlock=0, bPause=0;	
int a[25][12] = {0,};		// 배경이 되는 배열, 0으로 초기화
int i, j, bx, by;
int L[8]={0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F, 0xFF};		// LED 레벨 표시 배열
int N[10]={0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xd8, 0x80, 0x90};     // 7 Segment 숫자 표시 배열
int blocks[7][4][4][4]={						// 테트리스 블럭들
{{0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0},{0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0},
 {0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0},{0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0}},
{{0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0},{0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0},
 {0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0},{0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0}},
{{0,0,0,0,1,1,0,0,0,1,1,0,0,0,0,0},{0,0,0,0,0,0,1,0,0,1,1,0,0,1,0,0},
 {0,0,0,0,1,1,0,0,0,1,1,0,0,0,0,0},{0,0,0,0,0,0,1,0,0,1,1,0,0,1,0,0}},
{{0,0,0,0,0,1,1,0,1,1,0,0,0,0,0,0},{0,0,0,0,1,0,0,0,1,1,0,0,0,1,0,0},
 {0,0,0,0,0,1,1,0,1,1,0,0,0,0,0,0},{0,0,0,0,1,0,0,0,1,1,0,0,0,1,0,0}},
{{0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,0},{0,0,0,0,1,1,0,0,0,1,0,0,0,1,0,0},
 {0,0,0,0,0,0,0,0,1,1,1,0,1,0,0,0},{0,0,0,0,0,1,0,0,0,1,0,0,0,1,1,0}},
{{0,0,0,0,1,0,0,0,1,1,1,0,0,0,0,0},{0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0},
 {0,0,0,0,0,0,0,0,1,1,1,0,0,0,1,0},{0,0,0,0,0,1,1,0,0,1,0,0,0,1,0,0}},
{{0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0},{0,0,0,0,0,1,0,0,0,1,1,0,0,1,0,0},
 {0,0,0,0,0,0,0,0,1,1,1,0,0,1,0,0},{0,0,0,0,0,1,0,0,1,1,0,0,0,1,0,0}}
};
enum {DOWN, LEFT, RIGHT, ROTATE};
int type, ntype, rotate=0, seed=0;

void Move_Block(int num);
void Reset();
void New_Block();
void Draw_Block(int num);	
void Drop_Block();
void Line_Check();
void Drop_Now();
int Check_Collision(int num);
void Draw();
void Start();
void Gain_Score(int num);
void Show_Score();
void Show_Pause();
void Game_Over();


void USART_Init(unsigned int ubrr) {		// USART 초기화 함수
	UBRR0H = (unsigned char)(ubrr >> 8);
	UBRR0L = (unsigned char)ubrr;
	UCSR0B = (1 << TXEN0)|(1 << RXEN0);
	UCSR0C = (3 << UCSZ0);
}

void Timer_Init(){				// 타이머 초기화 함수
	TCCR0 = (3 << CS0);
	TIMSK = (1 << OCIE0);
	OCR0 = 249;
}

ISR(TIMER0_COMP_vect){			// Compare Match 인터럽트 루틴
	msec++;
	if(msec > 300/level+2000/(level+1)/level){	// 레벨에 따라 딜레이 설정
		msec = 0;
		seed += 111;	
		sec++;	
	}
	if(sec == 1){
		sec=0;
		if(!bDrawBlock)			// 새 블럭을 그려야 하면
			Draw_Block(0);		// 블록 그림
		else				// 아니면
			Drop_Block();		// 블럭 내림
		Draw();				// 화면 갱신
	}
}

void USART_Transmit(char data){			// 데이터 송신(Character)
	while(!(UCSR0A & (1 << UDRE0)));
	UDR0 = data;
}

void USART_Transmit_String(char *str) {		// 데이터 송신(String)
	while (*str != '\0')
		USART_Transmit(*str++);
}

ISR(USART0_RX_vect) {				// 수신 인터럽트 루틴
	UCSR0B &= ~(1 << RXCIE0);
	char tmp = UDR0;
	seed+=tmp;				// 랜덤 시드 변경
	if(!bPause){				// 멈추지 않았을 시
		if(!st)				// 게임 시작 전이면
			st=1;			// 시작 변수 1
		if(bDrawBlock){			// 새 블럭이 출력된 이후면
			if(tmp == 'a'){			// a 수신 시
				Move_Block(LEFT);	// 왼쪽으로 이동
				Draw();			// 화면 갱신
			}
			if(tmp == 'd') {		// d 수신 시
				Move_Block(RIGHT);	// 오른쪽으로 이동
				Draw();			// 화면갱신
			}
			if(tmp == 'w') {		// w 수신 시
				rotate++;		// 회전 변수 +1
				if(rotate>3)		// 회전 변수 3 넘으면
					rotate=0;		// 0으로 초기화
				switch(Check_Collision(ROTATE)){
				case 2 :				// 왼쪽에 충돌 시
					Move_Block(RIGHT);Move_Block(RIGHT);							// 오른쪽으로 2번 이동
					Draw_Block(1);		// 돌아간 블럭 그림
					Move_Block(LEFT); Move_Block(LEFT); break;							// 왼쪽으로 2번 이동
				case 3 :				// 오른쪽에 충돌 시
					Move_Block(LEFT);Move_Block(LEFT);								// 왼쪽으로 두번 이동
					Draw_Block(1);		// 돌아간 블럭 그림
					Move_Block(RIGHT);Move_Block(RIGHT);break;							// 오른쪽으로 2번 이동
				default	: Draw_Block(1); break;								// 충돌 안할 시 바로 돌아간 블럭 그림
				}
				Draw();		// 화면 갱신
			}
			if(tmp == 's') {		// s 수신 시
				Drop_Now();		// 블럭을 밑으로 떨어뜨림
				Draw();			// 화면 갱신
			}
			msec+=100;			// 수신하는 시간 추가
		}
	}
}

void Interrupt_Init() {				// 인터럽트 초기화 함수
	EIMSK = (1 << INT0) | (1 << INT1);		// INT0, INT1 핀 인터럽트 허용
}

ISR(INT0_vect) {				// INT0 핀 인터럽트 루틴
	TIMSK = 0;				// 타이머 정지
	bPause=1;				// 정지 변수 1
}

ISR(INT1_vect) {			// INT1 핀 인터럽트 루틴
	TIMSK = (1 << OCIE0);		// 타이머 재가동
	bPause=0;			// 정지 변수 0
	PORTA=0;			// 7 Segment 정지
	PORTB=0;
}

//---------------------------------------------------------------------------------------------------------------------int main(){
	USART_Init(MYUBRR);	// USART 초기화
	DDRA = 0xFF;		// 포트 A 출력 (7 Segment 선택)
	DDRB = 0xFF;		// 포트 B 출력 (7 Segment 데이터)
	DDRF = 0xFF;		// 포트 F 출력 (LED)
	DDRC = 0x00;		// 포트 C 입력 (스위치)
	DDRD = 0x00;		// 포트 D 입력 (스위치)
	Start();			// 게임 시작 화면 출력
	Reset();			// 벽 그림
	
	while(!st){		// 시작 화면 출력 반복문
		UCSR0B |= (1 << RXCIE0);		// 수신 인터럽트 허용
		SREG = 0x80;				// 외부 인터럽트 허용
		USART_Transmit_String("              Press Any Key         \r");
		for(int k=0; k<300; k++){	
			for(int l=0 ; l<1000; l++){
				if(PINC == 0x01) {		// 스위치 1 입력
					while(PINC != 0);
					if(level>1)		// 레벨 감소
						level--;
				}
				else if(PINC == 0x02) {		// 스위치 2 입력
					while(PINC != 0);
					if(level<8)		// 레벨 증가
						level++;
				}
				PORTF=L[level-1];		// LED에 레벨 표시
			}
		}
		USART_Transmit_String("                                    \r");
		for(int k=0; k<200; k++){
			for(int l=0 ; l<1000; l++){
				if(PINC == 0x01) {		// 스위치 1 입력
					while(PINC != 0);
					if(level>1)		// 레벨 감소
						level--;
				}
				else if(PINC == 0x02) {		// 스위치 1 입력
					while(PINC != 0);
					if(level<8)		// 레벨 증가
						level++;
				}
				PORTF=L[level-1];		// LED에 레벨 표시
			}
		}
	}

	New_Block();	// 다음 블럭 만듬
	Draw();		// 화면 갱신
	Timer_Init();	// 타이머 초기화
	Interrupt_Init();	// 인터럽트 초기화

	while(st){		// 게임 진행 반복문
		UCSR0B |= (1 << RXCIE0);		// 수신 인터럽트 허용
		SREG = 0x80;			// 외부 인터럽트 허용
		_delay_ms(10);
		USART_Transmit_String("\0");
		if(bPause) Show_Pause();	// 정지 상태일 시 7 Segment로 정지 출력
	}
	TIMSK = 0;					// 타이머 인터럽트 종료
	EIMSK = 0;					// 핀 인터럽트 종료
	Game_Over();					// 게임 종료 창 출력

	while(1)		// 게임 종료 반복문
               Show_Score();		// 7 Segment로 점수 출력
}

//---------------------------------------------------------------------------------------------------------------------
void Move_Block(int num){			// 블럭 이동 함수
	switch(num){	
	case LEFT : 			// 왼쪽으로 이동 시
		if(!Check_Collision(LEFT)){	// 충돌이 없으면
			bx--;			// 블럭 x좌표 -1
			for(i = 0; i < 4 ; i++) {	// 블럭 왼쪽으로 복사
				for (j = 0 ; j < 5 ; j++){
					if((a[by+i][bx+j] < 2)&&(a[by+i][bx+j+1] < 2))
						a[by+i][bx+j]=a[by+i][bx+j+1];
					else if((a[by+i][bx+j] < 2)&&(a[by+i][bx+j+1] > 1))
						a[by+i][bx+j] = 0;
				}
			}
			if(bx < 7)		// 블럭 옆부분 비움
				for (i = 0 ; i < 4 ; i++)
					if(a[by+i][bx-1]==1)
						a[by+i][bx+4]=0;
				
		} break;
	case RIGHT : 				// 왼쪽으로 이동 시
		if(!Check_Collision(RIGHT)){		// 충돌이 없으면
			bx++;			// 블럭 x좌표 +1	
			for(i = 0; i < 4 ; i++) {	// 블럭 오른쪽으로 복사
				for (j = 4 ; j > -1 ; j--){
					if((a[by+i][bx+j] < 2)&&(a[by+i][bx+j-1] < 2))
						a[by+i][bx+j]=a[by+i][bx+j-1];
					else if((a[by+i][bx+j] < 2)&&(a[by+i][bx+j-1] > 1))
						a[by+i][bx+j]=0;
				}
			}
			if(bx > 1)		// 블럭 옆부분 비움
				for (i = 0 ; i < 4 ; i++)
					if(a[by+i][bx-1]==1) 
						a[by+i][bx-1]=0;			
		} break;
	}
}

void Reset(){					// 벽 생성 함수
	int m;
	for(m=0; m<25 ; m++){			// 양쪽 벽 생성
		a[m][0] = 3;
		a[m][11] = 3;
	}
	for(m=0; m<12 ; m++){			// 바닥 생성
		a[24][m] = 3;
	}
}

void New_Block(){				// 다음 블럭 선택 함수
	srand(seed);				
	ntype = rand() % 7;			// 7종류 타입 랜덤 선택
}

void Draw_Block(int num){			// 블럭을 특정 좌표에 그리는 함수
	if(!num){				// 새로운 블럭이면
		type = ntype;			// 다음 블럭 타입 불러옴
		rotate=0;			// 회전 초기화
		by=0;				// y좌표 초기화
		bx=4;				// x좌표 초기화
	}
	bDrawBlock = 1;				// 새 블럭 출력 변수 1
	for(i = 0 ; i < 4 ; i++) {			// 블럭 위치 지우기
		for (j = 0 ; j < 4 ; j++)
			if(a[by+i][bx+j] == 1)
				a[by+i][bx+j] = 0;
	}
	for(i = 0 ; i < 4 ; i++) {		// 현재 블럭 새로 그림
		for (j = 0 ; j < 4 ; j++)
			if(blocks[type][rotate][i][j] == 1)
				a[by+i][bx+j] = 1;
	}
	if(!num)				// 새로운 블럭이면
		New_Block();			// 다음 블럭 선택
}

void Drop_Block(){				// 블럭 내려오는 함수
	if(Check_Collision(DOWN)){		// 아래 충돌 시
		for(i=by;i<by+4;i++){		// 블럭 굳힘
			for(j=bx;j<bx+4;j++){
				if(blocks[type][rotate][i-by][j-bx] == 1) a[i][j] = 2;
			}
		}
		_delay_ms(10);
		Line_Check();			// 라인 체크
		bDrawBlock = 0;			// 새 블럭 변수 0
	}
	else if(!Check_Collision(DOWN)){	// 충돌 아닐 시
		by++;				// 블럭 y좌표 +1
		for( i = 3; i > -1 ; i--) {		// 블럭 한칸 아래로 복사
			for ( j=0 ; j < 4 ; j++){
				if((a[by+i][bx+j] < 2)&&(a[by+i-1][bx+j] < 2))
					a[by+i][bx+j]=a[by+i-1][bx+j];
				else if((a[by+i][bx+j] < 2)&&(a[by+i-1][bx+j] > 1))
						a[by+i][bx+j]=0;
			}
		}
		for (j = 0 ; j < 4 ; j++)		// 블럭 윗부분 비움
			if(a[by-1][bx+j]==1) 
				a[by-1][bx+j]=0;
	}
}

void Line_Check(){				// 라인 체크 함수
	int nFix;				// 라인 체크용 변수
	for(i = 23 ; i > 3 ;) {			
		nFix=0;
		for (j = 1 ; j < 11 ; j++) {		//  라인 검사
			if(a[i][j] == 2	)
				nFix++;
		}
		if(nFix == 10) {			// 10칸 모두 가득 차면
			Gain_Score(level);		// 점수 획득
			lines++;			// 라인 수 증가
			for(int ii=i ; ii > 3 ; ii--){		// 한 줄 내려옴
				for(j = 1 ; j < 11 ; j++)
					a[ii][j] = a[ii-1][j];
			}
		}
		else i--;
	}
	if(lines>9){			// 10줄 지우면 레벨업
		lines=0;
		if(level<8)
			level++;
	}
	Draw();				// 화면 갱신
}

void Drop_Now(){				// 블럭 떨어뜨리는 함수
	while(!Check_Collision(DOWN)){		// 충돌이 안나는 동안 계속 내려옴
		by++;
		for( i = 3; i > -1 ; i--) {
			for ( j=0 ; j < 4 ; j++){
				if((a[by+i][bx+j] < 2)&&(a[by+i-1][bx+j] < 2))
					a[by+i][bx+j]=a[by+i-1][bx+j];
				else if((a[by+i][bx+j] < 2)&&(a[by+i-1][bx+j] > 1))
						a[by+i][bx+j]=0;
			}
		}
		for (j = 0 ; j < 4 ; j++)
			if(a[by-1][bx+j]==1) 
				a[by-1][bx+j]=0;
	}
	
	for(i=by;i<by+4;i++){			// 블럭 굳힘
		for(j=bx;j<bx+4;j++){
			if(blocks[type][rotate][i-by][j-bx] == 1) a[i][j] = 2;
		}
	}
	_delay_ms(10);
	Line_Check();				// 라인 체크
	bDrawBlock = 0;				// 새 블럭 변수 0
}
int Check_Collision(int num){			// 충돌 확인 함수
	switch(num){
	case DOWN :				// 아래 충돌 확인
		for(i = 0 ; i < 4 ; i++) {
			for(j = 0 ; j < 4 ; j++) {
				if((a[by+i][bx+j] == 1) && (a[by+i+1][bx+j]>1))
					return 1;
			}
		} break;
	case LEFT : 				// 왼쪽 충돌 확인
		for(i = 0 ; i < 4 ; i++) {
			for(j = 0 ; j < 4 ; j++) {
				if((a[by+i][bx+j] == 1) && (a[by+i][bx+j-1]>1))
					return 1;
			}
		} break;
	case RIGHT : 				// 오른쪽 충돌 확인
		for(i = 0 ; i < 4 ; i++) {
			for(j = 0 ; j < 4 ; j++) {
				if((a[by+i][bx+j] == 1) && (a[by+i][bx+j+1]>1))
					return 1;
			}
		} break;
	case ROTATE : 				// 회전 충돌 확인
		for(i = 0 ; i < 4 ; i++) {
				if((a[by+i][bx] == 3)||(a[by+i][bx-1] == 3))
					return 2;
				else if((a[by][bx+3] == 3 )||(a[by+i][bx+4] == 3))
					return 3;			
		}
	}
	return 0;
}

void Draw(){				// 화면 갱신 함수
	USART_Transmit_String("\f");		// 화면 내림
	for(i=1 ; i<25 ; i++){			// 배열 a 출력
		USART_Transmit_String("　　");
		for( j=0 ; j<12 ; j++){		
			switch(a[i][j]){
			case 0 :if(i == 3)	USART_Transmit_String("__");	// 4번째 줄에 상한선 표시
				else	USART_Transmit_String(BLANK); break;	// 0이면 빈칸 출력
			case 1 : USART_Transmit_String(BLOCK); break;		// 1이면 블럭 출력
			case 2 : if(i == 3) {st=0; USART_Transmit_String(FIX);}							// 4번째 줄에 2면 게임 오버
				else	USART_Transmit_String(FIX); break;  // 2면 굳은 블럭 출력
			case 3 : USART_Transmit_String(WALL); break;		// 3이면 벽 출력
			}
		}
		switch(i){		// Next Block 출력
			case 3:USART_Transmit_String("　　　-Next Block-"); break;
			case 4:
			case 5:
			case 6:
			case 7: USART_Transmit_String("　　　　");
				for(j=0 ; j<4 ; j++) {
					if(blocks[ntype][0][i-4][j]==1) 									USART_Transmit_String(BLOCK);
					else USART_Transmit_String(BLANK);
				} break;
			case 8: USART_Transmit_String("　　　------------"); break;
			}
		if(i!=24)
			USART_Transmit_String("\r\n");	// 줄바꿈
	}
	PORTF=L[level-1];				// 레벨에 따른 LED 표시
	_delay_ms(10);
}

void Start(){					// 게임 시작 화면 출력 함수
	USART_Transmit_String("\f");
	USART_Transmit_String("                    i                 \n\r                    ZS                \n\r                   iWBi               \n\r                    :i                \n\r                    i2                \n\r                    MBi               \n\r                   .M0S               \n\r                      ia:,r:              \n\r          ,i.  , .7r:iiS,    i        \n\r        .XXSX::SX:.SX22a2   iri.              --- How To Play? ---\n\r        SX7rr7X77i:ri.:7r,,i,,:i                W : Rotate Block \n\r        22XXiir777r7,ZSrXr XSSr,                A : Move Left    \n\r         X2r82i :i7iiMZ:X: .XaM                 D : Move Right   \n\r          .i7rr  7ii:X,r77 ,:r@                 S : Drop Block   \n\r         ri.,r2r277,7Zr::a ,:iii               10Lines : Level Up\n\r        .7X  ::ZX2X:iSr. XiiX02B,             --------------------\n\r      ,. rrrXZX2rZ7,:X,:. r8a270      \n\r     i:,XB0Z2i2@B7ii.:Xrri.iZZM7:     \n\r      :,ZZX:i7XMr BMMi7.i:7  aZ M0X:  \n\r     .7iir.,r7 .:i:i:.iSXSX,,r,.X2:.  \n\r     .XrriMZ .B7  77r .  ...:,.   ,:  \n\n\r");
	_delay_ms(500);
	USART_Transmit_String("               T ");
	_delay_ms(500);
	USART_Transmit_String("E ");
	_delay_ms(500);
	USART_Transmit_String("T ");
	_delay_ms(500);
	USART_Transmit_String("R ");
	_delay_ms(500);
	USART_Transmit_String("I ");
	_delay_ms(500);
	USART_Transmit_String("S          \n\r");
	_delay_ms(1000);
}

void Gain_Score(int num) {			// 점수 획득 함수
 	score1+=num;				// 라인 한 줄당 레벨X10의 점수 획득
    if(score5>9) {
        score0=9; score1=9; score2=9; score3=9; score4=9; score5=9; }  
    else {
	if(score1>9) {
		score1-=10; score2++; }
	if(score2>9) {
		score2-=10; score3++; }
	if(score3>9) {
		score3-=10; score4++; }
	if(score4>9) {
		score4-=10; score5++; }
    }
}

void Show_Score() {			// 7 Segment 점수 출력 함수
	PORTA=0x20;		
	PORTB=N[score5];
	_delay_ms(1);
	PORTA=0x10;
	PORTB=N[score4];
	_delay_ms(1);
 	PORTA=0x08;
	PORTB=N[score3];
	_delay_ms(1);
	PORTA=0x04;
	PORTB=N[score2];
	_delay_ms(1);
	PORTA=0x02;
	PORTB=N[score1];
	_delay_ms(1);
	PORTA=0x01;
	PORTB=N[score0];
	_delay_ms(1);
}
void Show_Pause() {			// 7 Segment 정지 출력 함수
	PORTA=0x10;
	PORTB=0x8C;
	_delay_ms(1);
	PORTA=0x08;
	PORTB=0x88;
	_delay_ms(1);
	PORTA=0x04;
	PORTB=0xC1;
	_delay_ms(1);
	PORTA=0x02;
	PORTB=0x92;
	_delay_ms(1);
	PORTA=0x01;
	PORTB=0x86;
	_delay_ms(1);
}

void Game_Over(){			// 게임 오버 출력 함수
	int GO[7][31]=
	{0,0,0,0,0,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,1,1,0,1,1,0,0,1,1,1,1
	,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,1,0,0,1,0,1,0,0,0
	,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,1,0,0,1,0,0,1,0,1,0,0,0
	,0,0,0,0,0,0,0,1,0,0,1,1,0,1,1,1,1,1,0,1,0,0,1,0,0,1,0,1,1,1,1
	,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,1,0,0,1,0,1,0,0,0
	,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,1,0,0,1,0,1,0,0,0
	,0,0,0,0,0,0,0,0,1,1,1,0,0,1,0,0,0,1,0,1,0,0,1,0,0,1,0,1,1,1,1};
	int GO2[7][29] =
	{0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,0,0,0,1,0,1,1,1,1,0,1,1,1,0
	,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,0,1,0,0,1
	,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,1,0,1,0,0,1,0,0,0,0,1,0,0,1
	,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,1,0,1,0,0,1,1,1,1,0,1,1,1,0
	,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,1,0,1,0,0,1,0,0,0,0,1,1,0,0
	,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,1,0,1,0
	,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,1,0,0,0,1,1,1,1,0,1,0,0,1};
	USART_Transmit_String("\f\n\n\n\n");
	for(i=0 ; i<7 ; i++){
		for(j=0;j<31;j++){
			if(GO[i][j]==1) USART_Transmit_String("▩");
			else USART_Transmit_String("　");
			_delay_ms(5);
		}
		USART_Transmit_String("\r\n");
	}
	USART_Transmit_String("\n\r\n");
	for(i=0 ; i<7 ; i++){
		for(j=0;j<29;j++){
			if(GO2[i][j]==1) USART_Transmit_String("▩");
			else USART_Transmit_String("　");
			_delay_ms(5);
		}
		USART_Transmit_String("\r\n");
	}
}
